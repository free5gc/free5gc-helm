#
# Software Name : towards5gs-helm
# SPDX-FileCopyrightText: Copyright (c) 2021 Orange
# SPDX-License-Identifier: Apache-2.0
#
# This software is distributed under the Apache License 2.0,
# the text of which is available at https://github.com/Orange-OpenSource/towards5gs-helm/blob/main/LICENSE
# or see the "LICENSE" file for more details.
#
# Author: Abderaouf KHICHANE, Ilhem FAJJARI, Ayoub BOUSSELMI
# Software description: An open-source project providing Helm charts to deploy 5G components (Core + RAN) on top of Kubernetes
#
{{- with .Values.smf }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "free5gc-smf.fullname" $ }}-{{ .name }}
  labels:
    {{- include "free5gc-smf.labels" $ | nindent 4 }}
    project: {{ $.Values.global.projectName }}
    nf: {{ .name }}
spec:
  {{- if not .autoscaling.enabled }}
  replicas: {{ .replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "free5gc-smf.selectorLabels" $ | nindent 6 }}
      project: {{ $.Values.global.projectName }}
      nf: {{ .name }}
  template:
    metadata:
      annotations:
        {{- include "free5gc-smf.smfAnnotations" $ | nindent 8 }}
        {{- if and $.Values.isPfcpNeeded $.Values.global.n4network.enabled}}
        k8s.v1.cni.cncf.io/networks: '[
            { "name": "{{ $.Values.global.n4network.name }}-{{ include "free5gc-smf.fullname" $ }}",
              "interface": "n4",
              "ips": [ "{{ $.Values.global.smf.n4if.ipAddress }}/{{ $.Values.global.n4network.cidr }}" ],
              "gateway": [ "{{ $.Values.global.n4network.gatewayIP }}" ]
            }]'
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/smf-configmap.yaml") $ | sha256sum }}
      labels:
        {{- include "free5gc-smf.selectorLabels" $ | nindent 8 }}
        project: {{ $.Values.global.projectName }}
        nf: {{ .name }}
    spec:
      imagePullSecrets:
        {{- toYaml .imagePullSecrets | nindent 8 }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .name }}
        image: "{{ .image.name }}{{ if .image.tag }}:{{ .image.tag }}{{ else if .image.digest }}@sha256:{{ .image.digest }}{{ else }}:{{ $.Chart.AppVersion }}{{ end }}"
        imagePullPolicy: {{ .image.pullPolicy }}
        securityContext:
          {{- toYaml .securityContext | nindent 10 }}
        ports:
        - name: nsmf
          containerPort: {{ .service.port }}
        {{- if $.Values.isPfcpNeeded }}
        - name: n4
          containerPort: 8805
          protocol: UDP
        {{- end }}
        command:
          - "/sbin/tini"
          - "--"
          - "./smf"
        args:
          - "-c"
          - "./config/smfcfg.yaml"
          - "-u"
          - "./config/uerouting.yaml"
        env:
          - name: GIN_MODE
            value: release
        {{- if .readinessProbe.enabled }}
        readinessProbe:
          {{- if .readinessProbe.httpGet }}
          httpGet:
            {{- toYaml .readinessProbe.httpGet | nindent 12 }}
          {{- end }}
          {{- if .readinessProbe.exec }}
          exec:
            {{- tpl (toYaml .readinessProbe.exec) . | nindent 12 }}
          {{- end }}
          initialDelaySeconds: {{ .readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .readinessProbe.timeoutSeconds | default 1 }}
          successThreshold: {{ .readinessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .readinessProbe.failureThreshold | default 3 }}
        {{- end }}
        {{- if .livenessProbe.enabled }}
        livenessProbe:
          {{- if .livenessProbe.httpGet }}
          httpGet:
            {{- toYaml .livenessProbe.httpGet | nindent 12 }}
          {{- end }}
          {{- if .livenessProbe.exec }}
          exec:
            {{- tpl (toYaml .livenessProbe.exec) . | nindent 12 }}
          {{- end }}
          initialDelaySeconds: {{ .livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .livenessProbe.timeoutSeconds | default 10 }}
          successThreshold: {{ .livenessProbe.successThreshold | default 1 }}
          failureThreshold: {{ .livenessProbe.failureThreshold | default 3 }}
        {{- end }}
        volumeMounts:
        - mountPath: {{ .volume.mount }}
          name: {{ include "free5gc-smf.fullname" $ }}-volume
        - mountPath: {{ .volume.tlsmount }}
          name: {{ include "free5gc-smf.fullname" $ }}-empty-volume
        - mountPath: {{ .volume.certmount }}
          name: {{ include "free5gc-smf.fullname" $ }}-cert-volume
        resources:
            {{- toYaml .resources | nindent 12 }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      nodeSelector:
        {{- toYaml .nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .affinity | nindent 8 }}
      tolerations:
        {{- toYaml .tolerations | nindent 8 }}

      volumes:
      - name: {{ include "free5gc-smf.fullname" $ }}-volume
        projected:
          sources:
          - configMap:
              name: {{ include "free5gc-smf.fullname" $ }}-configmap
              items:
              - key: smfcfg.yaml
                path: smfcfg.yaml
              - key: uerouting.yaml
                path: uerouting.yaml
      - name: {{ include "free5gc-smf.fullname" $ }}-empty-volume
        emptyDir: {}
      - name: {{ include "free5gc-smf.fullname" $ }}-cert-volume
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: {{ printf "%s-smf-tls-secret" $.Release.Name }}
              items:
                - key: smf.pem
                  path: smf.pem
                - key: smf.key
                  path: smf.key
          - configMap:
              name: free5gc-public-certs
              items:
                - key: nrf.pem
                  path: nrf.pem
{{- end }}
